# Data structures

# Data frames
Data frames are the most common way of storing and analyzing data in R, so it’s important to understand what they are and how to create them. 
A data frame is a collection of columns containing data, similar to a spreadsheet or SQL table. Each column has a name that represents a variable and includes one observation per row. 
Data frames summarize data and organize it into a format that is easy to read and use. 

There are a few key things to keep in mind when working with data frames: 
    Data frames can include many different types of data, including numeric, logical, or character.
    Data frames can have only one element in each cell.
    Each column should be named. 
    Each column should consist of elements of the same data type.

If you need to manually create a data frame in R, you can use the data.frame() function. The data.frame() function takes vectors as input. 
In the parentheses, enter the name of the column, followed by an equals sign, and then the vector you want to input for that column. 
In this example, the x column is a vector with elements 1, 2, 3, and the y column is a vector with elements 1.5, 5.5, 7.5. Run the following code to create the data frame. 
data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))

When you run the code, R displays the data frame in ordered rows and columns. 
  x   y
1 1 1.5
2 2 5.5
3 3 7.5

Use the extract operator to extract a subset from a data frame. When you use this operator on a data frame, it takes two arguments: the row(s) and column(s) you’d like to extract, separated by a comma. 
As an example, name the data frame above z. Then, to extract the element from the second row and the first column, use the code z[2,1], which returns a value of 2:
z <- data.frame(x = c(1, 2, 3) , y = c(1.5, 5.5, 7.5))
z[2,1]

[1] 2

# Files

# Create a file
Use the file.create() function to create a blank file. Place the name and the type of the file in the parentheses of the function. Your file types will usually be something like .txt, .docx, or .csv.
file.create("new_text_file.txt") 
file.create("new_word_file.docx") 
file.create("new_csv_file.csv") 

If the file is successfully created when you run the function, R will return a value of TRUE. Otherwise, R will return a value of FALSE. 
file.create("new_csv_file.csv")
# code output:
# [1] TRUE

# Copy a file
Copy a file with the file.copy() function. In the parentheses, add the name of the file to be copied. Then, enter a comma, and add the name of the destination folder that you want to copy the file to. 
file.copy("new_text_file.txt", "destination_folder")
If you check the Files tab in RStudio, a copy of the file appears in the relevant folder

You can delete R files with the unlink() function. Enter the file’s name in the parentheses of the function.
unlink("some_.file.csv")

# Matrices 
A matrix is a two-dimensional collection of data elements. This means it has both rows and columns. By contrast, a vector is a one-dimensional sequence of data elements. 
But like vectors, matrices can only contain a single data type. For example, you can’t have both logicals and numerics in a matrix. 

To create a matrix in R, you can use the matrix() function. The matrix() function has two main arguments that you enter in the parentheses. First, add a vector. 
The vector contains the values you want to place in the matrix. 
Next, add at least one matrix dimension. You can choose to specify the number of rows or the number of columns by using the code nrow = or ncol =. 

For example, to create a 2x3 (two rows by three columns) matrix containing the values 3-8, enter a vector containing that series of numbers: c(3:8). Then, enter a comma. 
Finally, enter nrow = 2 to specify the number of rows. Run the code: 
matrix(c(3:8), nrow = 2)

     [,1] [,2] [,3]
[1,]    3    5    7
[2,]    4    6    8

R displays a matrix with three columns and two rows (typically referred to as a “2x3”) that contain the numeric values 3, 4, 5, 6, 7, 8. 
R places the first value (3) of the vector in the uppermost row, and the leftmost column of the matrix, and continues the sequence from left to right. 

You can also choose to specify the number of columns (ncol = ) instead of the number of rows (nrow = ). Run the code: 
matrix(c(3:8), ncol = 2)

     [,1] [,2]
[1,]    3    6
[2,]    4    7
[3,]    5    8

R infers the number of rows automatically.

Similar to data frames, you can extract an element from a matrix with the extract operator, [].
