Facet Functions

How to use the ggplot2 facet functions to display our data in new ways. 
Facet functions let you display smaller groups or subsets of your data. A facet is a side or section of an object, like the sides of a gemstone. 
Facets show different sides of your data by placing each subset on its own plot. Faceting can help you discover new patterns in your data and focus on relationships between different variables. 
For example, let's say you're looking at sales data for a clothing company. 
You might want to break down your data by category to show specific trends: children's clothing versus adult clothing, or spring fashions versus fall fashions. Or if you are running an employee engagement survey, you might want to break down your data by tenure and compare senior employees to new employees. 

Ggplot2 has two functions for faceting; Facet underscore wrap and facet underscore grid.
We will start with facet underscore wrap. To facet your plot by a single variable, use facet underscore wrap. Let's say we wanted to focus on the data for each species of penguin. 
Take our plot that shows the relationship between body mass and flipper length in each penguin species. The facet underscore wrap function lets us create a separate plot for each species. 
To add a new layer to our plot, we'll add a plus symbol to our code. Then inside the parentheses of the facet underscore wrap function, type a tilde symbol, followed by the name of the variable. 

'tilde' (~):
Tilde operator is used to define the relationship between dependent variable and independent variables in a statistical model formula. 
The variable on the left-hand side of tilde operator is the dependent variable and the variable(s) on the right-hand side of tilde operator is/are called the independent variable(s). 
So, tilde operator helps to define that dependent variable depends on the independent variable(s) that are on the right-hand side of tilde operator. (retrieved from tutorialspoint.com)
In the case of this example, the independent variable at the end of the syntax line would be species, and the dependent variable in this case is facet_wrap. 
The facet_wrap is actually a function that is being called to separate and distribute the independent data within the plot. 

Let's log into RStudio Cloud and check it out. As a reminder, we'll start by loading the ggplot2 package and the penguins dataset.
library(ggplot2)
library(palmerpenguins)

ggplot(data=penguins)+
	geom_point(mapping=aes(x=flipper_length_mm,y=body_mass_g,color=species))+
	facet_wrap(~species)

The separate plots show the relationship between body mass and flipper length within each species of penguin. 

Let's try faceting the diamonds dataset. 
Earlier, we made a bar chart that showed the number of diamonds for each category of cut. Fair, good, very good, premium, and ideal. 
We can use facet underscore wrap on the cut variable to create a separate plot for each category of cut.

ggplot(data=diamonds)+
	geom_bar(mapping=aes(x=cut,fill=cut))+
	facet_wrap(~cut)

To facet your plot with two variables, use the facet underscore grid function. 
Facet underscore grid will split the plot into facets vertically by the values of the first variable and horizontally by the values of the second variable. 
For example, we can take our penguins plot and use facet underscore grid with the two variables, sex and species. In the parentheses following the facet underscore grid function, we write sex, then the tilde symbol, then species.

ggplot(data=penguins)+
	geom_point(mapping=aes(x=flipper_length_mm,y=body_mass_g,color=species))+
	facet_grid(sex~species)

There are nine separate plots, each based on a combination of the three species of penguin and three categories of sex. 
Facet underscore grid lets you quickly reorganize and display complex data and makes it easier to spot relationships between different groups. 

If we want, we can focus our plot on only one of the two variables. For example, we can tell R to remove sex from the vertical dimension of the plot and just show species.
ggplot(data=penguins)+
	geom_point(mapping=aes(x=flipper_length_mm,y=body_mass_g,color=species))+
	facet_grid(~species)

You can easily spot differences in the relationship between flipper length and body mass between the three species. 

In the same way, we can focus our plot on sex instead of species.
ggplot(data=penguins)+
	geom_point(mapping=aes(x=flipper_length_mm,y=body_mass_g,color=species))+
	facet_grid(~sex)

** Aesthetics and visualizations activity solutions **
## The Scenario
In this example, you are a junior data analyst working for the same hotel booking company from earlier. 
Last time, you created some simple visualizations with `ggplot2` to give your stakeholders quick insights into your data. 
Now, you are are interested in creating visualizations that highlight different aspects of the data to present to your stakeholder. 
You are going to expand on what you have already learned about `ggplot2` and create new kinds of visualizations like bar charts.

## Step 1: Import your data
Run the code below to read in the file 'hotel_bookings.csv' into a data frame:

```{r}
hotel_bookings <- read.csv("hotel_bookings.csv")
```

## Step 2: Refresh Your Memory
Refresh your memory with the `head()` and `colnames()` functions. Run two code chunks below to get at a sample of the data and also preview all the column names:

```{r look at data}
head(hotel_bookings)
```

```{r look at column names}
colnames(hotel_bookings)
```

## Step 3: Install and load the 'ggplot2' package (optional)
Run the code chunk below to install and load `ggplot2` if you don't have it installed and loaded already.

```{r loading and installing ggplot2, echo=FALSE, message=FALSE}
install.packages('ggplot2')
library(ggplot2)
```

## Step 4: Making a Bar Chart
Previously, you used `geom_point` to make a scatter plot. Now, you will use `geom_bar` to make a bar chart in this code chunk: 

```{r example chart}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = distribution_channel))
```

## Practice quiz
Use the bar chart you created to answer this question: what distribution type has the most number of bookings?
A: TA/TO
B: Direct
C: GDS
D: Corporate
Answer: A. The TA/TO distribution type has the most number of bookings.

## Step 5: Diving deeper into bar charts
After exploring your bar chart, your stakeholder has more questions. Now they want to know if the number of bookings for each distribution type is different depending on whether or not there was a deposit or what market segment they represent. 
Try running the code below to answer the question about deposits. You will use 'fill=deposit_type' to accomplish this.

```{r pressure, echo=FALSE}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = distribution_channel, fill=deposit_type))
```

Now try running the code below to answer the question about different market segments. You will use 'fill=market_segment' to accomplish this.

```{r pressure, echo=FALSE}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = distribution_channel, fill=market_segment))
```
## Step 6: Facets galore
After reviewing the new charts, your stakeholder asks you to create separate charts for each deposit type and market segment to help them understand the differences more clearly.

Run the code chunk below to create a different chart for each deposit type:
```{r creating a plot}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = distribution_channel)) +
  facet_wrap(~deposit_type)
```

Run the code chunk below to create a different chart for each market segment:
```{r creating a plot}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = distribution_channel)) +
  facet_wrap(~market_segment)
```

The `facet_grid` function does something similar. The main difference is that `facet_grid` will include plots even if they are empty. Run the code chunk below to check it out:

```{r creating a plot}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = distribution_channel)) +
  facet_grid(~deposit_type)
```

Now, you could put all of this in one chart and explore the differences by deposit type and market segment.

Run the code chunk below to find out; notice how the ~ character is being used before the variables that the chart is being split by: 
```{r creating a plot}
ggplot(data = hotel_bookings) +
  geom_bar(mapping = aes(x = distribution_channel)) +
  facet_wrap(~deposit_type~market_segment)
